name: üêß Linux Builds
on:
  workflow_call:

# Global Settings
env:
  # Used for the cache key. Add version suffix to force clean build.
  GODOT_BASE_BRANCH: master
  SCONSFLAGS: verbose=yes warnings=extra werror=yes module_text_server_fb_enabled=yes  module_mono_enabled=yes
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  TSAN_OPTIONS: suppressions=misc/error_suppressions/tsan.txt

concurrency:
  group: ci-${{github.actor}}-${{github.head_ref || github.run_number}}-${{github.ref}}-linux
  cancel-in-progress: true

jobs:
  build-linux:
    runs-on: "ubuntu-20.04"
    name: ${{ matrix.name }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Editor w/ Mono (target=editor , arch=x86_64)
            cache-name: linux-editor-mono-x86_64
            target: editor
            sconsflags: arch=x86_64
            bin: "./bin/godot.linuxbsd.editor.x86_64.mono"
            build-mono: true
            tests: false # Disabled due freeze caused by mix Mono build and CI
            doc-test: true
            proj-conv: true
            api-compat: true
            artifact: true
          - name: Editor w/ Mono (target=editor , arch=arm64)
            cache-name: linux-editor-mono-arm64
            target: editor
            sconsflags: arch=arm64
            bin: "./bin/godot.linuxbsd.editor.arm64.mono"
            build-mono: true
            tests: false # Disabled due freeze caused by mix Mono build and CI
            doc-test: true
            proj-conv: true
            api-compat: true
            artifact: true
            
          - name: Template w/ Mono (target=template_release, arch=x86_64)
            cache-name: linux-template-mono-x86_64
            target: template_release
            build-mono: false
            tests: false
            sconsflags: arch=x86_64
          - name: Template w/ Mono (target=template_release, arch=arm64)
            cache-name: linux-template-mono-arm64
            target: template_release
            build-mono: false
            tests: false
            sconsflags: arch=arm64





    steps:
      - uses: actions/checkout@v4.1.1

      # Need newer mesa for lavapipe to work properly.
      - name: Linux dependencies for tests
        if: ${{ matrix.proj-test }}
        run: |
          sudo rm -f /etc/apt/sources.list.d/microsoft-prod.list
          sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys EB8B81E14DA65431D7504EA8F63F0F2B90935439
          sudo add-apt-repository "deb https://ppa.launchpadcontent.net/kisak/turtle/ubuntu focal main"
          sudo apt-get install -qq mesa-vulkan-drivers

      # TODO: Figure out somehow how to embed this one.
      - name: wayland-scanner dependency
        run: |
          sudo apt-get install libwayland-bin

      - name: Free disk space on runner
        run: |
          echo "Disk usage before:" && df -h
          sudo rm -rf /usr/local/lib/android
          echo "Disk usage after:" && df -h

      - name: Download Godot
        uses: actions/download-artifact@v4.1.4
        with:
          name: godot-source
      - name: Display structure of downloaded files
        run: ls -R
      - name: Unzip Godot
        run: |
          chmod +x godot.zip
          unzip godot.zip -d ./godot
          mv godot/* ./
      - name: Setup Godot build cache
        uses: ./.github/actions/godot-cache
        with:
          cache-name: ${{ matrix.cache-name }}
          continue-on-error: true
      - name: Setup python and scons
        uses: ./.github/actions/godot-deps

      - name: Set up .NET Sdk
        uses: actions/setup-dotnet@v3
        if: ${{ matrix.build-mono }}
        with:
          dotnet-version: '6.0.x'

      - name: Setup GCC problem matcher
        uses: ammaraskar/gcc-problem-matcher@master

      - name: Compilation
        uses: ./.github/actions/godot-build
        with:
          sconsflags: ${{ env.SCONSFLAGS }} ${{ matrix.sconsflags }}
          platform: linuxbsd
          target: ${{ matrix.target }}
          tests: ${{ matrix.tests }}

      - name: Generate C# glue
        if: ${{ matrix.build-mono }}
        run: |
          ${{ matrix.bin }} --headless --generate-mono-glue ./modules/mono/glue

      - name: Build .NET solutions
        if: ${{ matrix.build-mono }}
        run: |
          ./modules/mono/build_scripts/build_assemblies.py --godot-output-dir=./bin --godot-platform=linuxbsd

      - name: Prepare artifact
        if: ${{ matrix.artifact }}
        run: |
          strip bin/godot.*
          chmod +x bin/godot.*
          cd bin
          zip -r ${{ matrix.cache-name }}.zip .

      - name: Upload artifact
        uses: ./.github/actions/upload-artifact
        if: ${{ matrix.artifact }}
        with:
          name: ${{ matrix.cache-name }}


      # Execute unit tests for the editor
      - name: Unit tests
        if: ${{ matrix.tests }}
        run: |
          ${{ matrix.bin }} --version
          ${{ matrix.bin }} --help
          ${{ matrix.bin }} --headless --test --force-colors

      - name: .NET source generators tests
        if: ${{ matrix.build-mono }}
        run: |
          dotnet test modules/mono/editor/Godot.NET.Sdk/Godot.SourceGenerators.Tests



